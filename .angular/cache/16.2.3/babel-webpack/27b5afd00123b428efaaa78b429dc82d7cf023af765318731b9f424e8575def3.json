{"ast":null,"code":"import { TaskStatus } from 'src/app/core/enums/task-status.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/tasks.service\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../tasks-details/tasks-details.component\";\nimport * as i5 from \"../pagination-controls/pagination-controls.component\";\nfunction TasksMasterComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelement(1, \"app-tasks-details\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r0.getRowStyle(ctx_r0.PaginatedTasks, i_r2).row_bg_color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"task\", task_r1)(\"rowStyle\", ctx_r0.getRowStyle(ctx_r0.PaginatedTasks, i_r2));\n  }\n}\nexport let TasksMasterComponent = /*#__PURE__*/(() => {\n  var _class;\n  class TasksMasterComponent {\n    constructor(_TasksService, title, cdref) {\n      this._TasksService = _TasksService;\n      this.title = title;\n      this.cdref = cdref;\n      this.viewMore = false;\n      this.allTasks = [];\n      this.images_path = 'assets/images/';\n      this.rowStyle = {};\n      this.activePage = 0;\n      this.tasksPerPage = 5; // Tasks shown per page\n      this.PaginatedTasks = [];\n    }\n    // Fixing \"Expression has changed after it was checked\"\n    ngAfterContentChecked() {\n      this.cdref.detectChanges();\n    }\n    ngOnInit() {\n      this.getTasks();\n    }\n    getTasks() {\n      this._TasksService.getTasks().subscribe({\n        next: result => {\n          this.title.setTitle('ELSEWEDY Tasks');\n          this.allTasks = result.data;\n        },\n        error: err => console.log(err)\n      });\n    }\n    // Change Styles based on the Task Status\n    getRowStyle(rowData, index) {\n      const targetObj = rowData[index].status;\n      this.rowStyle = {};\n      if (targetObj === TaskStatus.Running) {\n        // 3\n        this.rowStyle.row_bg_color = '#e5f4ff';\n        this.rowStyle.status_img_url = this.images_path + 'refresh icon.svg';\n        this.rowStyle.status_class_name = 'running-status';\n        this.rowStyle.task_status_name = TaskStatus[TaskStatus.Running];\n      } else if (targetObj === TaskStatus.Finished) {\n        // 4\n        this.rowStyle.row_bg_color = '#f6fff6';\n        this.rowStyle.status_img_url = this.images_path + 'finished icon.svg';\n        this.rowStyle.status_class_name = 'finished-status';\n        this.rowStyle.task_status_name = TaskStatus[TaskStatus.Finished];\n      } else if (targetObj === TaskStatus.Queued) {\n        // 2\n        this.rowStyle.row_bg_color = '#fff';\n        this.rowStyle.status_img_url = this.images_path + 'queued.png';\n        this.rowStyle.status_class_name = 'queued-status';\n        this.rowStyle.task_status_name = TaskStatus[TaskStatus.Queued];\n      } else if (targetObj === TaskStatus.New) {\n        // 1\n        this.rowStyle.row_bg_color = '#fff';\n        this.rowStyle.status_img_url = this.images_path + 'New task icon.svg';\n        this.rowStyle.status_class_name = 'new-status';\n        this.rowStyle.task_status_name = TaskStatus[TaskStatus.New];\n      }\n      return this.rowStyle;\n    }\n    // Display The paginated Tasks only\n    displayActivePage(activePageNumber) {\n      this.activePage = activePageNumber;\n      this.PaginatedTasks = this.getPaginatedTasks(this.activePage, this.tasksPerPage, this.allTasks);\n    }\n    // Get Paginated Tasks only and the rest in the other pages\n    getPaginatedTasks(page, pageSize, tasks) {\n      return tasks.slice((page - 1) * pageSize, page * pageSize);\n    }\n  }\n  _class = TasksMasterComponent;\n  _class.ɵfac = function TasksMasterComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.TasksService), i0.ɵɵdirectiveInject(i2.Title), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-tasks-master\"]],\n    decls: 10,\n    vars: 3,\n    consts: [[1, \"container-fluid\", \"mb-4\"], [1, \"outer-border\", \"py-4\", \"px-2\", \"outer-border-shadow\"], [1, \"container-fluid\"], [1, \"row\"], [1, \"col\", \"vstack\", \"gap-2\"], [\"class\", \"task-detail gray-border-80\", 3, \"background-color\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\", \"mt-4\"], [1, \"col\"], [1, \"d-flex\", \"justify-content-center\"], [3, \"totalRecords\", \"recordsPerPage\", \"onPageChange\"], [1, \"task-detail\", \"gray-border-80\"], [3, \"task\", \"rowStyle\"]],\n    template: function TasksMasterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4);\n        i0.ɵɵtemplate(5, TasksMasterComponent_div_5_Template, 2, 4, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 6)(7, \"div\", 7)(8, \"div\", 8)(9, \"app-pagination-controls\", 9);\n        i0.ɵɵlistener(\"onPageChange\", function TasksMasterComponent_Template_app_pagination_controls_onPageChange_9_listener($event) {\n          return ctx.displayActivePage($event);\n        });\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.PaginatedTasks);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"totalRecords\", ctx.allTasks.length)(\"recordsPerPage\", ctx.tasksPerPage);\n      }\n    },\n    dependencies: [i3.NgForOf, i4.TasksDetailsComponent, i5.PaginationControlsComponent]\n  });\n  return TasksMasterComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}